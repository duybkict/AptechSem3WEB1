@using MvcAssignment.Linq

@**
 * Generate a html list element of an specific category with state based on current filter state.
 *@
@helper CategoryListItem(Category category, String currentState, String search) {
    String currentBinState = "";
    try {
        currentBinState = Convert.ToString(Convert.ToInt32(currentState.ToString(), 16), 2).PadLeft(64, '0');
    } catch (Exception) {
        currentBinState = "".PadLeft(64, '0');
    }
    int currentCatState = currentBinState[currentBinState.Length - category.id] - 48; // TODO: category.id is not exact

    int newCatState = (currentCatState == 1) ? 0 : 1;
    String newBinState = currentBinState.Substring(0, currentBinState.Length - category.id) + newCatState + currentBinState.Substring(currentBinState.Length - category.id + 1);
    String newState = Convert.ToString(Convert.ToInt32(newBinState, 2), 16);

    if (currentCatState == 1) {
	<li class="active"><a href="~/Products/Index?filter=@newState&search=@search">@category.name</a></li>
    } else {
	<li><a href="~/Products/Index?filter=@newState&search=@search">@category.name</a></li>
    }
}

@**
 * Generate a html h1 element for products page title with a specific category parent.
 *@
@helper ProductsPageTitle(String categoryParentAlias, Dictionary<CategoryParent, List<Category>> categoryTree, String currentState) {
    String currentBinState = "";
    try {
        currentBinState = Convert.ToString(Convert.ToInt32(currentState.ToString(), 16), 2).PadLeft(64, '0');
    } catch (Exception) {
        currentBinState = "".PadLeft(64, '0');
    }

    String title = "";
    int index = 1;

    foreach (var catParent in categoryTree.Keys) {
        foreach (var category in categoryTree[catParent]) {
            if (category.CategoryParent.alias.Equals(categoryParentAlias)
                && currentBinState[currentBinState.Length - index] == '1') {
                title += " " + category.name + ",";
            }
            index++;
        }
    }

    if (title.Equals("")) {
        title = "All Products";
    } else {
        title = title.Remove(title.Length - 1).Trim();
        if (title.Contains(',')) {
            title = title.Substring(0, title.LastIndexOf(',')) + " & " + title.Substring(title.LastIndexOf(',') + 1);
        }
    }
	
	<h1>@title</h1>	
}

@helper Paginations(int page, int countPages, String currentState, String search) {    
	<div class="pagination pagination-centered">
		<ul>
			@if (page <= 1) {
				<li class="disabled"><a>&lt;&lt;</a></li>
            } else {
				<li><a href="~/Products/Index?filter=@currentState&search=@search">&lt;&lt;</a></li>
            }

			@if (page <= 1) {
				<li class="disabled"><a>&lt;</a></li>
            } else {
				<li><a href="~/Products/Index?filter=@currentState&search=@search&page=@(page - 1)">&lt;</a></li>
            }

			@{int index = (page - 2 < countPages - 4) ? page - 2 : countPages - 4;}


			@for (int j = 0; j < 5 && index <= countPages; index++) {
                if (index >= 1 && index <= countPages) {
                    if (index == page) { 
				<li class="disabled"><a href="~/Products/Index?filter=@currentState&search=@search&page=@index">@index.ToString()</a></li>
                    } else {
				<li><a href="~/Products/Index?filter=@currentState&search=@search&page=@index">@index.ToString()</a></li>
                    }
                    
                    j++;
                }
            }


			@if (page == countPages) {
				<li class="disabled"><a>&gt;</a></li>
            } else {
				<li><a href="~/Products/Index?filter=@currentState&search=@search&page=@(page + 1)">&gt;</a></li>
            }

			@if (page >= countPages) {
				<li class="disabled"><a>&gt;&gt;</a></li>
            } else {
				<li><a href="~/Products/Index?filter=@currentState&search=@search&page=@countPages">&gt;&gt;</a></li>
            }
		</ul>
	</div>        
}